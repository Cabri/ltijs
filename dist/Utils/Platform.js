"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Utis
var Database = require('./Database');

var Auth = require('./Auth');

var provPlatformDebug = require('debug')('provider:platform');

var ENCRYPTIONKEY;
var authConfig;
/**
 * @description Class representing a registered platform.
 */

var Platform =
/*#__PURE__*/
function () {
  /**
     * @param {string} name - Platform name.
     * @param {string} platformUrl - Platform url.
     * @param {string} clientId - Client Id generated by the platform.
     * @param {string} authenticationEndpoint - Authentication endpoint that the tool will use to authenticate within the platform.
     * @param {string} accesstokenEndpoint - Access token endpoint for the platform.
     * @param {string} kid - Key id for local keypair used to sign messages to this platform.
     * @param {string} _ENCRYPTIONKEY - Encryption key used
     * @param {Object} _authConfig - Authentication configurations for the platform.
     */
  function Platform(name, platformUrl, clientId, authenticationEndpoint, accesstokenEndpoint, kid, _ENCRYPTIONKEY, _authConfig) {
    _classCallCheck(this, Platform);

    authConfig = _authConfig;
    ENCRYPTIONKEY = _ENCRYPTIONKEY;
    this.platform_name = name;
    this.platformUrl = platformUrl;
    this.clientId = clientId;
    this.authEndpoint = authenticationEndpoint;
    this.accesstokenEndpoint = accesstokenEndpoint;
    this.kid = kid;

    if (!Database.Get(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
      platformUrl: this.platformUrl
    })) {
      provPlatformDebug('Registering new platform: ' + this.platformUrl);
      Database.Insert(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platform_name: this.platform_name,
        platformUrl: this.platformUrl,
        clientId: this.clientId,
        authEndpoint: this.authEndpoint,
        accesstokenEndpoint: this.accesstokenEndpoint,
        kid: this.kid,
        authConfig: authConfig
      });
    }
  }
  /**
     * @description Sets/Gets the platform name.
     * @param {string} [name] - Platform name.
     */


  _createClass(Platform, [{
    key: "platformName",
    value: function platformName(name) {
      if (!name) return this.platform_name;
      Database.Modify(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      }, {
        platform_name: name
      });
      this.platform_name = name;
    }
    /**
       * @description Sets/Gets the platform url.
       * @param {string} [url] - Platform url.
       */

  }, {
    key: "platformUrl",
    value: function platformUrl(url) {
      if (!url) return this.platformUrl;
      Database.Modify(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      }, {
        platformUrl: url
      });
      this.platformUrl = url;
    }
    /**
       * @description Sets/Gets the platform client id.
       * @param {string} [clientId] - Platform client id.
       */

  }, {
    key: "platformClientId",
    value: function platformClientId(clientId) {
      if (!clientId) return this.clientId;
      Database.Modify(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      }, {
        clientId: clientId
      });
      this.clientId = clientId;
    }
    /**
       * @description Gets the platform key_id.
       */

  }, {
    key: "platformKid",
    value: function platformKid() {
      return this.kid;
    }
    /**
       * @description Gets the RSA public key assigned to the platform.
       *
       */

  }, {
    key: "platformPublicKey",
    value: function platformPublicKey() {
      return Database.Get(false, './provider_data', 'publickeyset', 'keys', {
        kid: this.kid
      }).key;
    }
    /**
       * @description Gets the RSA private key assigned to the platform.
       *
       */

  }, {
    key: "platformPrivateKey",
    value: function platformPrivateKey() {
      return Database.Get(false, './provider_data', 'privatekeyset', 'keys', {
        kid: this.kid
      }).key;
    }
    /**
       * @description Sets/Gets the platform authorization configurations used to validate it's messages.
       * @param {string} method - Method of authorization "RSA_KEY" or "JWK_KEY" or "JWK_SET".
       * @param {string} key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.
       */

  }, {
    key: "platformAuthConfig",
    value: function platformAuthConfig(method, key) {
      if (!method && !key) return authConfig;
      if (method !== 'RSA_KEY' && method !== 'JWK_KEY' && method !== 'JWK_SET') throw new Error('Invalid message validation method. Valid methods are "RSA_KEY", "JWK_KEY", "JWK_SET"');
      if (!key) throw new Error('Missing secong argument key or keyset_url.');
      authConfig = {
        method: method,
        key: key
      };
      Database.Modify(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      }, {
        authConfig: authConfig
      });
    }
    /**
       * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.
       * @param {string} [authEndpoint] - Platform authorization endpoint.
       */

  }, {
    key: "platformAuthEndpoint",
    value: function platformAuthEndpoint(authEndpoint) {
      if (!authEndpoint) return this.authEndpoint;
      Database.Modify(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      }, {
        authEndpoint: authEndpoint
      });
      this.authEndpoint = authEndpoint;
    }
    /**
       * @description Sets/Gets the platform access token endpoint used to authenticate messages to the platform.
       * @param {string} [accesstokenEndpoint] - Platform access token endpoint.
       */

  }, {
    key: "platformAccessTokenEndpoint",
    value: function platformAccessTokenEndpoint(accesstokenEndpoint) {
      if (!accesstokenEndpoint) return this.accesstokenEndpoint;
      Database.Modify(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      }, {
        accesstokenEndpoint: accesstokenEndpoint
      });
      this.accesstokenEndpoint = accesstokenEndpoint;
    }
    /**
       * @description Returns a promise that resolves into the platform's access token or generate a new one.
       */

  }, {
    key: "platformAccessToken",
    value: function platformAccessToken() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var token = Database.Get(ENCRYPTIONKEY, './provider_data', 'access_tokens', 'access_tokens', {
          platformUrl: _this.platformUrl()
        });

        if (!token) {
          provPlatformDebug('Access_token for ' + _this.platformUrl() + ' not found');
          provPlatformDebug('Attempting to generate new access_token for ' + _this.platformUrl());
          Auth.getAccessToken(_this, ENCRYPTIONKEY).then(function (res) {
            resolve(res);
          })["catch"](function (err) {
            reject(err);
          });
        } else {
          provPlatformDebug('Access_token found');
          resolve(token.token);
        }
      });
    }
    /**
       * @description Deletes a registered platform.
       */

  }, {
    key: "remove",
    value: function remove() {
      Database.Delete(ENCRYPTIONKEY, './provider_data', 'platforms', 'platforms', {
        platformUrl: this.platformUrl
      });
      Database.Delete(false, './provider_data', 'publickeyset', 'keys', {
        kid: this.kid
      });
      Database.Delete(false, './provider_data', 'privatekeyset', 'keys', {
        kid: this.kid
      });
      return true;
    }
  }]);

  return Platform;
}();

module.exports = Platform;