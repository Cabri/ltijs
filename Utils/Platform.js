
//Utis
const low = require('lowdb')
const FileSync = require('lowdb/adapters/FileSync')
const Cryptr = require('cryptr');
const fs = require('fs')
const jwk = require('pem-jwk')

var ENCRYPTIONKEY

var cryptr
var adapter
var db

var auth_config = false

/**
 * @description Class representing a registered platform. 
 */
class Platform{
    /**
     * @param {string} name - Platform name.
     * @param {string} platform_url - Platform url. 
     * @param {string} client_id - Client Id generated by the platform.
     * @param {string} authentication_endpoint - Authentication endpoint that the tool will use to authenticate within the platform.
     * @param {string} kid - Key id for local keypair used to sign messages to this platform.
     * @param {string} _ENCRYPTIONKEY - Encryption key used 
     */
    constructor(name, platform_url, client_id, authentication_endpoint, kid, _ENCRYPTIONKEY, _auth_config){
        if(_auth_config) auth_config = _auth_config

        ENCRYPTIONKEY = _ENCRYPTIONKEY

        if(!fs.existsSync('./provider_data')) fs.mkdirSync('./provider_data')
        cryptr = new Cryptr(ENCRYPTIONKEY)
        adapter = new FileSync('./provider_data/platforms.json', {
            serialize: (data) => cryptr.encrypt(JSON.stringify(data)),
            deserialize: (data) => JSON.parse(cryptr.decrypt(data))
          })
        db = low(adapter)
        
        db.defaults({ platforms: []}).write()

        if(!name) {
            console.error("Error registering platform. Missing argument.")
            return false
        }

        this.platform_name = name
        this.platform_url = platform_url 
        this.client_id = client_id 
        this.auth_endpoint =  authentication_endpoint 
        this.kid = kid

        
       
       
        if(!db.get('platforms').find({platform_name: this.platform_name}).value()){
            console.log("Registering new platform >> " + this.platform_name)
            db.get('platforms').push({platform_name: this.platform_name, platform_url: this.platform_url, client_id: this.client_id, auth_endpoint: this.auth_endpoint, kid: this.kid, auth_config: auth_config}).write()
        }
        

    }


    /**
     * @description Finds platform by host url
     * @param {string} url - Url of the host
     */
    static findPlatformWithUrl(url, _ENCRYPTIONKEY){
        let ENCRYPTIONKEY = _ENCRYPTIONKEY


        if(!fs.existsSync('./provider_data')) fs.mkdirSync('./provider_data')
        let cryptr = new Cryptr(ENCRYPTIONKEY)
        let adapter = new FileSync('./provider_data/platforms.json', {
            serialize: (data) => cryptr.encrypt(JSON.stringify(data)),
            deserialize: (data) => JSON.parse(cryptr.decrypt(data))
          })
        let db = low(adapter)
        
        
        let obj = db.get('platforms').find({platform_url: url}).value()
        if(!obj) return false
        return new Platform(obj.platform_name, obj.platform_url, obj.client_id, obj.auth_endpoint, obj.kid, ENCRYPTIONKEY, obj.auth_config)
        
    }

    /**
     * @description Finds platform by host name
     * @param {string} name - Name of the host
     */
    static findPlatformWithName(name, _ENCRYPTIONKEY){
        let ENCRYPTIONKEY = _ENCRYPTIONKEY


        if(!fs.existsSync('./provider_data')) fs.mkdirSync('./provider_data')
        let cryptr = new Cryptr(ENCRYPTIONKEY)
        let adapter = new FileSync('./provider_data/platforms.json', {
            serialize: (data) => cryptr.encrypt(JSON.stringify(data)),
            deserialize: (data) => JSON.parse(cryptr.decrypt(data))
          })
        let db = low(adapter)
        
        
        let obj = db.get('platforms').find({platform_name: name}).value()
        if(!obj) return false
        return new Platform(obj.platform_name, obj.platform_url, obj.client_id, obj.auth_endpoint, obj.kid, ENCRYPTIONKEY, obj.auth_config)
        
    }



    /**
     * @description Sets/Gets the platform name.
     * @param {string} [name] - Platform name.
     */
    platformName(name){
        if(!name) return this.platform_name
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({platform_name: name}).write()
        this.platform_name = name
    }


    /**
     * @description Sets/Gets the platform url.
     * @param {string} [url] - Platform url.
     */
    platformUrl(url){
        if(!url) return this.platform_url
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({platform_url: url}).write()
        this.platform_url = url
    }




    /**
     * @description Sets/Gets the platform client id.
     * @param {string} [client_id] - Platform client id.
     */
    platformClientId(client_id){
        if(!client_id) return this.client_id
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({client_id: client_id}).write()
        this.client_id = client_id
    }


    /**
     * @description Gets the platform key_id.
     */
    platformKid(){
        return this.client_id
    }


    /**
     * @description Gets the Jwk public key assigned to the platform.
     *
     */
    platformPublicKeyJwk(){
        let pb_adapter = new FileSync('./provider_data/publickeyset.json')
        let pb = low(pb_adapter)
        pb.defaults({keys: []}).write()

        return pb.get('keys').find({kid: this.kid}).value()
    }

    /**
     * @description Gets the RSA public key assigned to the platform.
     *
     */
    platformPublicKeyRSA(){
        let pb_adapter = new FileSync('./provider_data/publickeyset.json')
        let pb = low(pb_adapter)
        pb.defaults({keys: []}).write()

        return jwk.jwk2pem(pb.get('keys').find({kid: this.kid}).value())
    }


     /**
     * @description Gets the Jwk private key assigned to the platform.
     *
     */
    platformPrivateKeyJwk(){
        let piv_adapter = new FileSync('./provider_data/privatekeyset.json')
        let piv = low(piv_adapter)
        piv.defaults({keys: []}).write()

        return piv.get('keys').find({kid: this.kid}).value()
    }

    /**
     * @description Gets the RSA private key assigned to the platform.
     *
     */
    platformPrivateKeyRSA(){
        let piv_adapter = new FileSync('./provider_data/privatekeyset.json')
        let piv = low(piv_adapter)
        piv.defaults({keys: []}).write()

        return jwk.jwk2pem(piv.get('keys').find({kid: this.kid}).value())
    }


    /**
     * @description Sets/Gets the platform authorization configurations used to validate it's messages.
     * @param {string} method - Method of authorization "RSA_KEY" or "JWK_KEY" or "JWK_SET".
     * @param {string} key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.
     */
    platformAuthConfig(method, key){
        if(!method && !key) return auth_config

        if(method != "RSA_KEY" && method != "JWK_KEY" && method != "JWK_SET"){
            console.error('Invalid message validation method. Valid methods are "RSA_KEY", "JWK_KEY", "JWK_SET"')
            return false
        }
        if(!key){
            console.error("Missing secong argument key or keyset_url.")
            return false
        }

        auth_config = {
            method: method,
            key: key
        }

        
        db.get('platforms').find({platform_name: this.platform_name}).assign({auth_config: auth_config}).write()
       
    }

     /**
     * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.
     * @param {string} [auth_endpoint] - Platform authorization endpoint.
     */
    platformAuthEndpoint(auth_endpoint){
        if(!auth_endpoint) return this.auth_endpoint
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({auth_endpoint: auth_endpoint}).write()
        this.auth_endpoint = auth_endpoint
    }

    /**
     * @description Deletes a registered platform.
     */
    remove(){
        db.get('platforms')
            .remove({ platform_name: this.platform_name })
            .write()


        let pb_adapter = new FileSync('./provider_data/publickeyset.json')
        let pb = low(pb_adapter)
        pb.defaults({keys: []}).write()

        let piv_adapter = new FileSync('./provider_data/privatekeyset.json')
        let piv = low(piv_adapter)
        piv.defaults({keys: []}).write()

        pb.get('keys').remove({kid: this.kid}).write()
        piv.get('keys').remove({kid: this.kid}).write()

        return true
    }
    
}

module.exports = Platform