
//Utis
const low = require('lowdb')
const FileSync = require('lowdb/adapters/FileSync')
const Cryptr = require('cryptr');

var ENCRYPTIONKEY

var cryptr
var adapter
var db


/**
 * @description Class representing a registered platform. 
 */
class Platform{
    /**
     * @param {string} name - Platform name.
     * @param {string} [client_id] - Client Id generated by the platform.
     * @param {string} [authentication_endpoint] - Authentication endpoint that the tool will use to authenticate within the platform.
     * @param {string} [_ENCRYPTIONKEY] - Encryption key used 
     */
    constructor(name, client_id, authentication_endpoint, _ENCRYPTIONKEY){

        ENCRYPTIONKEY = _ENCRYPTIONKEY || 'ltiproviderkey'

        cryptr = new Cryptr(ENCRYPTIONKEY)
        adapter = new FileSync('platforms.json', {
            serialize: (data) => cryptr.encrypt(JSON.stringify(data)),
            deserialize: (data) => JSON.parse(cryptr.decrypt(data))
          })
        db = low(adapter)
        
        db.defaults({ platforms: []}).write()

        if(!name) {
            console.error("Error registering platform. Missing argument.")
            return false
        }

        this.platform_name = name
        this.client_id = client_id || db.get('platforms').find({platform_name: this.platform_name}).value().client_id
        this.auth_endpoint =  authentication_endpoint || db.get('platforms').find({platform_name: this.platform_name}).value().auth_endpoint

        
       
       
        if(!db.get('platforms').find({platform_name: this.platform_name}).value()){
            console.log("Criando nova plataforma >> " + this.platform_name)
            
            db.get('platforms').push({ id: 1, platform_name: this.platform_name, client_id: this.client_id, auth_endpoint: this.auth_endpoint}).write()
        }
        

    }

    /**
     * @description Sets/Gets the platform name.
     * @param {string} [name] - Platform name.
     */
    platformName(name){
        if(!name) return this.platform_name
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({platform_name: name}).write()
        this.platform_name = name
    }

    /**
     * @description Sets/Gets the platform client id.
     * @param {string} [client_id] - Platform client id.
     */
    platformClientId(client_id){
        if(!client_id) return this.client_id
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({client_id: client_id}).write()
        this.client_id = client_id
    }

    /**
     * @description Sets/Gets the platform authorization endpoint.
     * @param {string} [auth_endpoint] - Platform authorization endpoint.
     */
    platformAuthEndpoint(auth_endpoint){
        if(!auth_endpoint) return this.auth_endpoint
        
        db.get('platforms').find({platform_name: this.platform_name}).assign({auth_endpoint: auth_endpoint}).write()
        this.auth_endpoint = auth_endpoint
    }

    /**
     * @description Deletes a registered platform.
     */
    remove(){
        db.get('platforms')
            .remove({ platform_name: this.platform_name })
            .write()

        return true
    }
    
}

module.exports = Platform