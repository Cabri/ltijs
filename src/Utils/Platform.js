
// Utis
const Auth = require('./Auth')
const provPlatformDebug = require('debug')('provider:platform')

/**
 * @description Class representing a registered platform.
 */
class Platform {
  #platformName

  #platformUrl

  #clientId

  #authEndpoint

  #authConfig

  #ENCRYPTIONKEY

  #accesstokenEndpoint

  #kid

  #logger

  #Database

  /**
     * @param {string} name - Platform name.
     * @param {string} platformUrl - Platform url.
     * @param {string} clientId - Client Id generated by the platform.
     * @param {string} authenticationEndpoint - Authentication endpoint that the tool will use to authenticate within the platform.
     * @param {string} accesstokenEndpoint - Access token endpoint for the platform.
     * @param {string} kid - Key id for local keypair used to sign messages to this platform.
     * @param {string} _ENCRYPTIONKEY - Encryption key used
     * @param {Object} _authConfig - Authentication configurations for the platform.
     */
  constructor (name, platformUrl, clientId, authenticationEndpoint, accesstokenEndpoint, kid, _ENCRYPTIONKEY, _authConfig, logger, Database) {
    this.#authConfig = _authConfig
    this.#ENCRYPTIONKEY = _ENCRYPTIONKEY

    this.#platformName = name
    this.#platformUrl = platformUrl
    this.#clientId = clientId
    this.#authEndpoint = authenticationEndpoint
    this.#accesstokenEndpoint = accesstokenEndpoint
    this.#kid = kid
    this.#logger = logger
    this.#Database = Database
  }

  /**
     * @description Sets/Gets the platform name.
     * @param {string} [name] - Platform name.
     */
  async platformName (name) {
    if (!name) return this.#platformName
    try {
      await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl }, { platformName: name })
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
    this.#platformName = name
    return this
  }

  /**
     * @description Sets/Gets the platform url.
     * @param {string} [url] - Platform url.
     */
  async platformUrl (url) {
    if (!url) return this.#platformUrl
    try {
      await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl }, { platformUrl: url })
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
    this.#platformUrl = url
    return this
  }

  /**
     * @description Sets/Gets the platform client id.
     * @param {string} [clientId] - Platform client id.
     */
  async platformClientId (clientId) {
    if (!clientId) return this.#clientId
    try {
      await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl }, { clientId: clientId })
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
    this.#clientId = clientId
    return this
  }

  /**
     * @description Gets the platform key_id.
     */
  platformKid () {
    return this.#kid
  }

  /**
     * @description Gets the RSA public key assigned to the platform.
     *
     */
  async platformPublicKey () {
    try {
      const key = await this.#Database.Get(this.#ENCRYPTIONKEY, 'publickey', { kid: this.#kid })
      return key[0].key
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
  }

  /**
     * @description Gets the RSA private key assigned to the platform.
     *
     */
  async platformPrivateKey () {
    try {
      const key = await this.#Database.Get(this.#ENCRYPTIONKEY, 'privatekey', { kid: this.#kid })
      return key[0].key
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
  }

  /**
     * @description Sets/Gets the platform authorization configurations used to validate it's messages.
     * @param {string} method - Method of authorization "RSA_KEY" or "JWK_KEY" or "JWK_SET".
     * @param {string} key - Either the RSA public key provided by the platform, or the JWK key, or the JWK keyset address.
     */
  async platformAuthConfig (method, key) {
    if (!method && !key) return this.#authConfig

    if (method !== 'RSA_KEY' && method !== 'JWK_KEY' && method !== 'JWK_SET') throw new Error('Invalid message validation method. Valid methods are "RSA_KEY", "JWK_KEY", "JWK_SET"')

    if (!key) throw new Error('Missing secong argument key or keyset_url.')

    const authConfig = {
      method: method,
      key: key
    }

    try {
      await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl }, { authConfig: authConfig })
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }

    this.#authConfig = authConfig
    return this
  }

  /**
     * @description Sets/Gets the platform authorization endpoint used to perform the OIDC login.
     * @param {string} [authEndpoint] - Platform authorization endpoint.
     */
  async platformAuthEndpoint (authEndpoint) {
    if (!authEndpoint) return this.#authEndpoint

    try {
      await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl }, { authEndpoint: authEndpoint })
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
    this.#authEndpoint = authEndpoint
    return this
  }

  /**
     * @description Sets/Gets the platform access token endpoint used to authenticate messages to the platform.
     * @param {string} [accesstokenEndpoint] - Platform access token endpoint.
     */
  async platformAccessTokenEndpoint (accesstokenEndpoint) {
    if (!accesstokenEndpoint) return this.#accesstokenEndpoint
    try {
      await this.#Database.Modify(false, 'platform', { platformUrl: this.#platformUrl }, { accesstokenEndpoint: accesstokenEndpoint })
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
    this.#accesstokenEndpoint = accesstokenEndpoint
    return this
  }

  /**
     * @description Gets the platform access token or attempts to generate a new one.
     * @param {String} scopes - String of scopes.
     */
  async platformAccessToken (scopes) {
    const token = await this.#Database.Get(this.#ENCRYPTIONKEY, 'accesstoken', { platformUrl: this.#platformUrl, scopes: scopes })

    if (!token || (Date.now() - token[0].createdAt) / 1000 > token[0].expires_in) {
      provPlatformDebug('Valid access_token for ' + this.#platformUrl + ' not found')
      provPlatformDebug('Attempting to generate new access_token for ' + this.#platformUrl)
      provPlatformDebug('With scopes: ' + scopes)

      const res = await Auth.getAccessToken(scopes, this, this.#ENCRYPTIONKEY, this.#Database)
      return res
    } else {
      provPlatformDebug('Access_token found')
      return token[0].token
    }
  }

  /**
   * @description Deletes a registered platform.
   */
  async remove () {
    try {
      return Promise.all([this.#Database.Delete('platform', { platformUrl: this.#platformUrl }), this.#Database.Delete('publickey', { kid: this.#kid }), this.#Database.Delete('privatekey', { kid: this.#kid })])
    } catch (err) {
      provPlatformDebug(err.message)
      if (this.#logger) this.#logger.log({ level: 'error', message: 'Message: ' + err.message + '\nStack: ' + err.stack })
      return false
    }
  }
}

module.exports = Platform
