/* Main file for the Provider functionalities */

// Express server to receive the requests
const Server = require('../Utils/Server')

// Handles requests
const Request = require('../Utils/Request')

// Platforms
const Platform = require('../Utils/Platform')

// Utils
const url = require('url')

//Pre-initiated variables
var loginUrl = "/login"
var appUrl = "/"
var ltiVersion = 1.3
var ENCRYPTIONKEY



/** Exposes methods for easy manipualtion of the LTI standard as a LTI Provider and a "server" object to manipulate the Express instance */
class Provider{

    /**
     * @description Exposes methods for easy manipualtion of the LTI standard as a LTI Provider and a "server" object to manipulate the Express instance.
     * @param {string} [_lti_version = "1.3"] - Valid versions are "1.1" and "1.3", it affects how the tool will comunicate with the consumer. Default value is "1.3".
     * @param {string} [_ENCRYPTIONKEY] - Optional encryption key to generate the db with platforms.
     */
    constructor(_lti_version, _ENCRYPTIONKEY){
        ENCRYPTIONKEY = _ENCRYPTIONKEY || 'ltiproviderkey'
        
        if(_lti_version && (parseFloat(_lti_version) == 1.3 || parseFloat(_lti_version) == 1.1)) ltiVersion = parseFloat(_lti_version)
        
        this.server = new Server().app
    }

    /**
     * @description Starts listening to a given port for LTI requests
     * @param {number} port - The port the Provider should listen to
     */
    deploy(port){
        /* In case no port is provided uses 3000 */
        port = port || 3000

        if(ltiVersion == 1.3){
            /* Handles the login */
            this.server.post(loginUrl, (req, res)=>{
                
                let platform = Platform.findPlatform(req.body.iss, ENCRYPTIONKEY)
                
                
                if (platform) {
                    res.redirect(url.format({
                        pathname: platform.platformAuthEndpoint(),
                        query: Request.lti1_3Login(req.body, platform)
                    }))
                }
                else console.error("Unregistered platform attempting connection: " + req.body.iss)
            })

            
            this.server.post(appUrl, (req, res, next)=>{
                console.log("Receiving POST request on main app route. Attempting to decode IdToken...")
                //Decode and return the token to the user handler
                res.locals.id_token = req.body.id_token
                next()
            })


        }

        

        
       
        //Starts server on given port
        this.server.listen(port, () => console.log("Lti Provider tool is listening on port " + port + "!\nLTI provider config: \n>Initiate login URL: " + loginUrl +"\n>App Url: " + appUrl + "\n>Lti Version: " + ltiVersion))
    }



    /**
     * @description Sets login Url responsible for dealing with the OIDC login flow. If no value is set "/login" is used.
     * @param {string} url - Login url.
     * @example provider.setLoginUrl('/login')
     */
    setLoginUrl(url){
        loginUrl = url
    }

    /**
     * @description Sets main application Url that will receive the final decoded Idtoken. If no value is set "/" (root) is used.
     * @param {string} url - App url.
     * @example provider.setAppUrl('/app')
     */
    setAppUrl(url){
        appUrl = url
    }


    /**
     * @description Registers a platform.
     * @param {string} name - Platform name.
     * @param {string} url - Platform url.
     * @param {string} client_id - Client Id generated by the platform.
     * @param {string} authentication_endpoint - Authentication endpoint that the tool will use to authenticate within the platform.
     */
    registerPlatform(name, url, client_id, authentication_endpoint){
        if(!name || !url || !client_id || !authentication_endpoint) {
            console.error("Error registering platform. Missing argument.")
            return false
        }

        return new Platform(name, url, client_id, authentication_endpoint, ENCRYPTIONKEY)
    }

    /**
     * @description Gets a platform.
     * @param {string} name - Platform name.
     */
    getPlatform(name){
        if(!name) return false
        console.log(ENCRYPTIONKEY)
        return new Platform(name, undefined, undefined , undefined, ENCRYPTIONKEY)
    }


    /**
     * @description Gets a platform.
     * @param {string} name - Platform name.
     */
    deletePlatform(name){
        if(!name) return false
        return new Platform(name, undefined, undefined , undefined, ENCRYPTIONKEY).remove()
    }
}
module.exports = Provider