/* Main file for the Provider functionalities */

// Express server to receive the requests
const Server = require('../Utils/Server')

// Handles requests
const Request = require('../Utils/Request')

// Platforms
const Platform = require('../Utils/Platform')

// Utils
const url = require('url')




/** Exposes methods for easy manipualtion of the LTI standard as a LTI Provider and a "server" object to manipulate the Express instance */
class Provider{

    /**
     * @description Exposes methods for easy manipualtion of the LTI standard as a LTI Provider and a "server" object to manipulate the Express instance.
     * @param {string} [_lti_version = "1.3"] - Valid versions are "1.1" and "1.3", it affects how the tool will comunicate with the consumer. Default value is "1.3"
     * 
     */
    constructor(_lti_version){
        
        this.ltiVersion = 1.3
        if(_lti_version && (parseFloat(_lti_version) == 1.3 || parseFloat(_lti_version) == 1.1)) this.ltiVersion = parseFloat(_lti_version)
        
        this.server = new Server().app
        this.loginUrl = "/login"

    }

    /**
     * @description Starts listening to a given port for LTI requests
     * @param {number} port - The port the Provider should listen to
     */
    deploy(port){
        /* In case no port is provided uses 3000 */
        port = port || 3000

        if(this.ltiVersion == 1.3){
            /* Handles the login */
            this.server.post(this.loginUrl, (req, res)=>{
                res.redirect(url.format({
                    pathname:"http://localhost/moodle/mod/lti/auth.php/",
                    query: Request.lti1_3Login(req.body, "LTI13")
                }))
            })

            
            this.server.post('/', (req, res)=>{
                console.log("received post")
                console.log(req.body)
            })
            this.server.get('/received', (req, res)=>{
                console.log("received get")
                console.log(req.body)
            })

            this.server.get('/', (req, res)=>{
                console.log("get>>")
                console.log(req.body)
                res.send("get")
                
            })
        }

        

        
       
        //Starts server on given port
        this.server.listen(port, () => console.log(`Lti Provider tool is listening on port ${port}!`))
    }



    /**
     * @description Sets login Url responsible for dealing with the OIDC login flow, if no value is set "/login" is used.
     * @param {string} url - Login url.
     * @example provider.setLoginUrl('/login')
     */
    setLoginUrl(url){
        this.loginUrl = url
    }


    /**
     * @description Registers a platform.
     * @param {string} name - Platform name.
     * @param {string} client_id - Client Id generated by the platform.
     * @param {string} authentication_endpoint - Authentication endpoint that the tool will use to authenticate within the platform.
     */
    registerPlatform(name, client_id, authentication_endpoint){
        if(!name || !client_id || !authentication_endpoint) {
            console.error("Error registering platform. Missing argument.")
            return false
        }

        return new Platform(name, client_id, authentication_endpoint)
    }

    /**
     * @description Gets a platform.
     * @param {string} name - Platform name.
     */
    getPlatform(name){
        if(!name) return false
        return new Platform(name)
    }

    /**
     * @description Gets a platform.
     * @param {string} name - Platform name.
     */
    deletePlatform(name){
        if(!name) return false
        return new Platform(name).remove()
    }
}
module.exports = Provider